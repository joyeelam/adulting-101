{"ast":null,"code":"var _jsxFileName = \"/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst decodeHTML = html => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nconst Question = () => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [options, setOptions] = useState([]);\n  const score = useSelector(state => state.score);\n  const encodedQuestions = useSelector(state => state.questions);\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return { ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      };\n    });\n    setQuestions(decodedQuestions);\n  }, [encodedQuestions]);\n  const questionIndex = useSelector(state => state.index);\n  const dispatch = useDispatch();\n  const question = questions[questionIndex];\n  const answer = question && question.correct_answer;\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  useEffect(() => {\n    if (!question) {\n      return null;\n    } else {\n      let answers = [...question.incorrect_answers];\n      answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer);\n      setOptions(answers);\n    }\n  }, [question]);\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true);\n    setSelectedAnswer(event.target.textContent);\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      });\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false);\n        setSelectedAnswer(null);\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        });\n      }, 2500);\n    }\n  };\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null;\n    }\n\n    if (option === answer) {\n      return `correct`;\n    }\n\n    if (option === selectedAnswer) {\n      return `selected`;\n    }\n  };\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Question \", questionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: options.map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleListItemClick,\n        className: getClass(option),\n        children: option\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score, \" / \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"pR2cFLICLO5pUXJamlbg5xMdnG4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js"],"names":["useState","useEffect","useSelector","useDispatch","decodeHTML","html","txt","document","createElement","innerHTML","value","Question","questions","setQuestions","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","options","setOptions","score","state","encodedQuestions","decodedQuestions","map","q","question","correct_answer","incorrect_answers","a","questionIndex","index","dispatch","answer","getRandomInt","max","Math","floor","random","answers","splice","length","handleListItemClick","event","target","textContent","type","setTimeout","getClass","option","i"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\n\nconst decodeHTML = (html) => {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nconst Question = () => {\n\n  const [questions, setQuestions] = useState([])\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const [options, setOptions] = useState([])\n\n  const score = useSelector(state => state.score)\n  const encodedQuestions = useSelector(state => state.questions)\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      }\n    })\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n\n  const questionIndex = useSelector(state => state.index)\n\n  const dispatch = useDispatch()\n\n  const question = questions[questionIndex]\n  const answer = question && question.correct_answer\n\n  const getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max))\n  }\n\n  useEffect(() => {\n    if (!question) {\n      return null\n    } else {\n      let answers = [...question.incorrect_answers]\n      answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer)\n      setOptions(answers)\n    }\n  }, [question])\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      })\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false)\n        setSelectedAnswer(null)\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        })\n      }, 2500)\n    }\n  }\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null\n    }\n    if (option === answer) {\n      return `correct`\n    }\n    if (option === selectedAnswer) {\n      return `selected`\n    }\n  }\n\n  if (!question) {\n    return <div>Loading...</div>\n  }  \n\n  return (\n    <div>\n      <p>Question {questionIndex + 1}</p>\n      <h3>{question.question}</h3>\n      <ul>\n        {options.map((option, i) => (\n          <li key={i} onClick={handleListItemClick} className={getClass(option)}>\n            {option}\n          </li>\n        ))}\n      </ul>\n      <div>\n        Score: {score} / {questions.length}\n      </div>\n    </div>\n  )\n}\n\nexport default Question\n"]},"metadata":{},"sourceType":"module"}