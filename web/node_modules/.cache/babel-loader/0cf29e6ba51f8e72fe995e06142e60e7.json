{"ast":null,"code":"var _jsxFileName = \"/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/FetchButton.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FetchButton = props => {\n  _s();\n\n  const questionCategory = useSelector(state => state.options.question_category);\n  const questionDifficulty = useSelector(state => state.options.question_difficulty);\n  const questionIndex = useSelector(state => state.index);\n  const dispatch = useDispatch();\n\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    });\n  };\n\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    });\n  };\n\n  const handleQuery = async () => {\n    let apiURL = 'https://opentdb.com/api.php?amount=5';\n\n    if (questionCategory.length) {\n      apiURL = apiURL.concat(`&category=9`);\n    }\n\n    if (questionDifficulty.length) {\n      apiURL = apiURL.concat(`&difficulty=${questionDifficulty}`);\n    }\n\n    setLoading(true);\n    await fetch(apiURL).then(resp => resp.json()).then(data => {\n      setQuestions(data.results);\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleQuery,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n\n_s(FetchButton, \"FEjbIE8Y5gsIs6rfN7WEDjW9FkA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = FetchButton;\nexport default FetchButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchButton\");","map":{"version":3,"sources":["/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/FetchButton.js"],"names":["useSelector","useDispatch","FetchButton","props","questionCategory","state","options","question_category","questionDifficulty","question_difficulty","questionIndex","index","dispatch","setLoading","value","type","loading","setQuestions","questions","handleQuery","apiURL","length","concat","fetch","then","resp","json","data","results","text"],"mappings":";;;AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,gBAAgB,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,iBAAxB,CAApC;AACA,QAAMC,kBAAkB,GAAGR,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcG,mBAAxB,CAAtC;AACA,QAAMC,aAAa,GAAGV,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACM,KAAhB,CAAjC;AAEA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,UAAU,GAAGC,KAAK,IAAI;AAC1BF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMG,YAAY,GAAGH,KAAK,IAAI;AAC5BF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,eADC;AAEPG,MAAAA,SAAS,EAAEJ;AAFJ,KAAD,CAAR;AAID,GALD;;AAOA,QAAMK,WAAW,GAAG,YAAY;AAC9B,QAAIC,MAAM,GAAG,sCAAb;;AACA,QAAIhB,gBAAgB,CAACiB,MAArB,EAA6B;AAC3BD,MAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAe,aAAf,CAAT;AACD;;AACD,QAAId,kBAAkB,CAACa,MAAvB,EAA+B;AAC7BD,MAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAe,eAAcd,kBAAmB,EAAhD,CAAT;AACD;;AACDK,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMU,KAAK,CAACH,MAAD,CAAL,CAAcI,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAA3B,EAAwCF,IAAxC,CAA6CG,IAAI,IAAI;AACzDV,MAAAA,YAAY,CAACU,IAAI,CAACC,OAAN,CAAZ;AACAf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHK,CAAN;AAID,GAbD;;AAeA,sBAAO;AAAQ,IAAA,OAAO,EAAEM,WAAjB;AAAA,cAA+BhB,KAAK,CAAC0B;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AAED,CAtCD;;GAAM3B,W;UACqBF,W,EACEA,W,EACLA,W,EAELC,W;;;KALbC,W;AAwCN,eAAeA,WAAf","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\n\nconst FetchButton = (props) => {\n  const questionCategory = useSelector(state => state.options.question_category)\n  const questionDifficulty = useSelector(state => state.options.question_difficulty)\n  const questionIndex = useSelector(state => state.index)\n\n  const dispatch = useDispatch()\n\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    })\n  }\n\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    })\n  }\n\n  const handleQuery = async () => {\n    let apiURL = 'https://opentdb.com/api.php?amount=5'\n    if (questionCategory.length) {\n      apiURL = apiURL.concat(`&category=9`)\n    }\n    if (questionDifficulty.length) {\n      apiURL = apiURL.concat(`&difficulty=${questionDifficulty}`)\n    }\n    setLoading(true)\n    await fetch(apiURL).then(resp => resp.json()).then(data => {\n      setQuestions(data.results)\n      setLoading(false)\n    })\n  }\n\n  return <button onClick={handleQuery}>{props.text}</button>\n\n}\n\nexport default FetchButton\n"]},"metadata":{},"sourceType":"module"}