{"ast":null,"code":"var _jsxFileName = \"/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst decodeHTML = html => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nconst Question = () => {\n  _s();\n\n  const score = useSelector(state => state.score); // const questions = useSelector(state => state.questions)\n  // const questionIndex = useSelector(state => state.index)\n\n  const encodedQuestions = useSelector(state => state.questions);\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [answerCorrect, setAnswerCorrect] = useState(null);\n  const dispatch = useDispatch();\n  const question = questions[questionIndex];\n  const answer = question && question.correct_answer;\n\n  const randomizeAnswer = (arr, corr) => {\n    const randInd = Math.floor(Math.random() * 4);\n    arr.splice(randInd, 0, corr);\n  };\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true);\n    setSelectedAnswer(event.target.textContent);\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      });\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false);\n        setSelectedAnswer(null);\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        });\n      }, 2500);\n    }\n  };\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return { ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => {\n          decodeHTML(a);\n        })\n      };\n    });\n    setQuestions(decodedQuestions);\n  }, [encodedQuestions]);\n  useEffect(() => {\n    if (!question) {\n      return null;\n    } else {\n      let answers = randomizeAnswer(question.incorrect_answers, question.correct_answer);\n      setOptions(answers);\n    }\n  }, [question]);\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null;\n    }\n\n    if (option === answer) {\n      return `correct`;\n    }\n\n    if (option === selectedAnswer) {\n      return `selected`;\n    }\n  };\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Question \", questionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: options.map((option, i) => {\n        /*#__PURE__*/\n        _jsxDEV(\"li\", {\n          onClick: handleListItemClick,\n          className: getClass(option),\n          children: option\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score, \" / \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Question, \"b9zTU1E/Y4SEhWKV+Pzc/nccXyY=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js"],"names":["useState","useSelector","useDispatch","decodeHTML","html","txt","document","createElement","innerHTML","value","Question","score","state","encodedQuestions","questions","setQuestions","options","setOptions","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","answerCorrect","setAnswerCorrect","dispatch","question","questionIndex","answer","correct_answer","randomizeAnswer","arr","corr","randInd","Math","floor","random","splice","handleListItemClick","event","target","textContent","type","length","setTimeout","index","useEffect","decodedQuestions","map","q","incorrect_answers","a","answers","getClass","option","i"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\n\nconst decodeHTML = (html) => {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nconst Question = () => {\n\n  const score = useSelector(state => state.score)\n  // const questions = useSelector(state => state.questions)\n  // const questionIndex = useSelector(state => state.index)\n  const encodedQuestions = useSelector(state => state.questions)\n\n  const [questions, setQuestions] = useState([])\n  const [options, setOptions] = useState([])\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const [answerCorrect, setAnswerCorrect] = useState(null)\n\n  const dispatch = useDispatch()\n\n  const question = questions[questionIndex]\n  const answer = question && question.correct_answer\n\n  const randomizeAnswer = (arr, corr) => {\n    const randInd = Math.floor(Math.random() * 4)\n    arr.splice(randInd, 0, corr)\n  }\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      })\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false)\n        setSelectedAnswer(null)\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        })\n      }, 2500)\n    }\n  }\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => {\n          decodeHTML(a)\n        })\n      }\n    })\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n\n  useEffect(() => {\n    if (!question) {\n      return null\n    } else {\n      let answers = randomizeAnswer(question.incorrect_answers, question.correct_answer)\n      setOptions(answers)\n    }\n  }, [question])\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null\n    }\n    if (option === answer) {\n      return `correct`\n    }\n    if (option === selectedAnswer) {\n      return `selected`\n    }\n  }\n\n  if (!question) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <>\n      <p>Question {questionIndex + 1}</p>\n      <h3>{question.question}</h3>\n      <ul>\n        {options.map((option, i) => {\n          <li key={i} onClick={handleListItemClick} className={getClass(option)}>\n            {option}\n          </li>\n        })}\n      </ul>\n      <div>\n        Score: {score} / {questions.length}\n      </div>\n    </>\n  )\n}\n\nexport default Question\n"]},"metadata":{},"sourceType":"module"}