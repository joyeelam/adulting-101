{"ast":null,"code":"var _jsxFileName = \"/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst decodeHTML = html => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nconst Question = () => {\n  _s();\n\n  const score = useSelector(state => state.score); // const questions = useSelector(state => state.questions)\n\n  const questionIndex = useSelector(state => state.index);\n  const encodedQuestions = useSelector(state => state.questions);\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [answerSelected, setAnswerSelected] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [answerCorrect, setAnswerCorrect] = useState(null);\n  const dispatch = useDispatch();\n  const question = questions[questionIndex];\n  const answer = question && question.correct_answer;\n\n  const randomizeAnswer = (arr, corr) => {\n    const randInd = Math.floor(Math.random() * 4);\n    arr.splice(randInd, 0, corr);\n  };\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true);\n    setSelectedAnswer(event.target.textContent);\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      });\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false);\n        setSelectedAnswer(null);\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        });\n      }, 2500);\n    }\n  };\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return { ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      };\n    });\n    setQuestions(decodedQuestions);\n  }, [encodedQuestions]);\n  useEffect(() => {\n    if (!question) {\n      return null;\n    } else {\n      let answers = randomizeAnswer(question.incorrect_answers, question.correct_answer);\n      setOptions(answers);\n    }\n  }, [question]);\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null;\n    }\n\n    if (option === answer) {\n      return `correct`;\n    }\n\n    if (option === selectedAnswer) {\n      return `selected`;\n    }\n  };\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Question \", questionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: options.map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleListItemClick,\n        className: getClass(option),\n        children: option\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score, \" / \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"Hr7eHmn8LFdJ6xEx00JTPjS1eas=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/joyeelam/Desktop/next-academy/react-flask-app/web/src/containers/quiz/Question.js"],"names":["useState","useEffect","useSelector","useDispatch","decodeHTML","html","txt","document","createElement","innerHTML","value","Question","score","state","questionIndex","index","encodedQuestions","questions","setQuestions","options","setOptions","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","answerCorrect","setAnswerCorrect","dispatch","question","answer","correct_answer","randomizeAnswer","arr","corr","randInd","Math","floor","random","splice","handleListItemClick","event","target","textContent","type","length","setTimeout","decodedQuestions","map","q","incorrect_answers","a","answers","getClass","option","i"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\n\nconst decodeHTML = (html) => {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nconst Question = () => {\n\n  const score = useSelector(state => state.score)\n  // const questions = useSelector(state => state.questions)\n  const questionIndex = useSelector(state => state.index)\n  const encodedQuestions = useSelector(state => state.questions)\n\n  const [questions, setQuestions] = useState([])\n  const [options, setOptions] = useState([])\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const [answerCorrect, setAnswerCorrect] = useState(null)\n\n  const dispatch = useDispatch()\n\n  const question = questions[questionIndex]\n  const answer = question && question.correct_answer\n\n  const randomizeAnswer = (arr, corr) => {\n    const randInd = Math.floor(Math.random() * 4)\n    arr.splice(randInd, 0, corr)\n  }\n\n  const handleListItemClick = event => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1\n      })\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false)\n        setSelectedAnswer(null)\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1\n        })\n      }, 2500)\n    }\n  }\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map(q => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\n      }\n    })\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n\n  useEffect(() => {\n    if (!question) {\n      return null\n    } else {\n      let answers = randomizeAnswer(question.incorrect_answers, question.correct_answer)\n      setOptions(answers)\n    }\n  }, [question])\n\n  const getClass = option => {\n    if (!answerSelected) {\n      return null\n    }\n    if (option === answer) {\n      return `correct`\n    }\n    if (option === selectedAnswer) {\n      return `selected`\n    }\n  }\n\n  if (!question) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <p>Question {questionIndex + 1}</p>\n      <h3>{question.question}</h3>\n      <ul>\n        {options.map((option, i) => (\n          <li key={i} onClick={handleListItemClick} className={getClass(option)}>\n            {option}\n          </li>\n        ))}\n      </ul>\n      <div>\n        Score: {score} / {questions.length}\n      </div>\n    </div>\n  )\n}\n\nexport default Question\n"]},"metadata":{},"sourceType":"module"}